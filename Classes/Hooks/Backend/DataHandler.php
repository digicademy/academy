<?phpnamespace Digicademy\Academy\Hooks\Backend;use TYPO3\CMS\Core\Database\ConnectionPool;use TYPO3\CMS\Core\Utility\GeneralUtility;use TYPO3\CMS\Backend\Utility\BackendUtility;/*************************************************************** *  Copyright notice * *  (c) 2021 Torsten Schrade <Torsten.Schrade@adwmainz.de> *  All rights reserved * *  This script is part of the TYPO3 project. The TYPO3 project is *  free software; you can redistribute it and/or modify *  it under the terms of the GNU General Public License as published by *  the Free Software Foundation; either version 2 of the License, or *  (at your option) any later version. * *  The GNU General Public License can be found at *  http://www.gnu.org/copyleft/gpl.html. * *  This script is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *  GNU General Public License for more details. * *  This copyright notice MUST APPEAR in all copies of the script! ***************************************************************/class DataHandler{    /**     * Generates a persistent identifier (uuid) on new and save for this extension's tables     *     * @param $status     * @param $table     * @param $id     * @param $fieldArray     * @param $pObj     */    public function processDatamap_postProcessFieldArray($status, $table, $id, &$fieldArray, &$pObj)    {        // generate xml conformant uuids as persistent identifiers        if ($table == 'tx_academy_domain_model_projects' ||            $table == 'tx_academy_domain_model_units' ||            $table == 'tx_academy_domain_model_persons' ||            $table == 'tx_academy_domain_model_relations' ||            $table == 'tx_academy_domain_model_roles' ||            $table == 'tx_academy_domain_model_hcards' ||            $table == 'tx_academy_domain_model_media' ||            $table == 'tx_academy_domain_model_products' ||            $table == 'tx_academy_domain_model_services' ||            $table == 'tx_academy_domain_model_publications' ||            $table == 'sys_category'        ) {            $generate = false;            switch ($status) {                case 'new':                    $generate = true;                    break;                case 'update':                default:                    $record = GeneralUtility::makeInstance(ConnectionPool::class)                        ->getConnectionForTable($table)                        ->select(['persistent_identifier'], $table, ['uid' => (int)$id]                        )->fetch();                    if (!$record['persistent_identifier']) {                        $generate = true;                    }            }            if ($generate == true) {                do {                    $uuid = $this->generateUUID();                } while (preg_match('/^[a-z]/', $uuid) !== 1);                $fieldArray['persistent_identifier'] = $uuid;            }        }        // core bug: setting of allowLanguageSynchronization in IRRE children that point back to the parent leads        // to override of localized child field with parent id; following mechanism forces child field to localized        // parent id - only applied to localized relations (copies)        // @see: https://forge.typo3.org/issues/80944        if ($status == 'update' && $table == 'tx_academy_domain_model_relations') {            // get the row and check if this is a localized relations            $row = BackendUtility::getRecord($table, $id);            // also history records to compare if parent would be override through the change            $historyRecords = $pObj->getHistoryRecords();            // dynamically fetch the field that points back to the parent by cropping it from the parent table that            // is also part of this transaction            if (array_key_first($pObj->datamap) == 'tx_news_domain_model_news') {                $newsRows = reset($pObj->datamap);                $parentRow = reset($newsRows);                ($parentRow['type'] == 3) ? $parentKey = 'event' : $parentKey = 'news';            } else {                $parentKey = substr(array_key_first($pObj->datamap),strrpos(array_key_first($pObj->datamap), '_')+1, -1);            }            // only trigger if we are dealing with a localized relations            if ($row['sys_language_uid'] > 0) {                // if the parent field in the localized row differs from current field array and if it was equal to the former history records                if ($row[$parentKey] != $fieldArray[$parentKey] && $row[$parentKey] == $historyRecords['tx_academy_domain_model_relations:' . $id ]['oldRecord'][$parentKey]) {                    $fieldArray[$parentKey] = $row[$parentKey];                }            }        }    }    /**     * Generates a universally unique identifier (UUID) according to RFC 4122 v4.     * The algorithm used here, might not be completely random. Copied from the identity extension.     *     * @return string The universally unique id     * @author Unknown     */    private function generateUUID()    {        return sprintf('%04x%04x-%04x-%04x-%04x-%04x%04x%04x',            mt_rand(0, 0xffff),            mt_rand(0, 0xffff),            mt_rand(0, 0xffff),            mt_rand(0, 0x0fff) | 0x4000,            mt_rand(0, 0x3fff) | 0x8000,            mt_rand(0, 0xffff),            mt_rand(0, 0xffff),            mt_rand(0, 0xffff));    }}